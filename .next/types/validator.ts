// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}




// Validate ../../app/api/activity-logs/route.ts
{
  const handler = {} as typeof import("../../app/api/activity-logs/route.js")
  handler satisfies RouteHandlerConfig<"/api/activity-logs">
}

// Validate ../../app/api/performance/route.ts
{
  const handler = {} as typeof import("../../app/api/performance/route.js")
  handler satisfies RouteHandlerConfig<"/api/performance">
}

// Validate ../../app/api/tickets/assign/route.ts
{
  const handler = {} as typeof import("../../app/api/tickets/assign/route.js")
  handler satisfies RouteHandlerConfig<"/api/tickets/assign">
}

// Validate ../../app/api/tickets/route.ts
{
  const handler = {} as typeof import("../../app/api/tickets/route.js")
  handler satisfies RouteHandlerConfig<"/api/tickets">
}

// Validate ../../app/api/time-tracking/route.ts
{
  const handler = {} as typeof import("../../app/api/time-tracking/route.js")
  handler satisfies RouteHandlerConfig<"/api/time-tracking">
}





// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
